#!@REALBASH@
# StarPU --- Runtime system for heterogeneous multicore architectures.
#
# Copyright (C) 2020-2025   University of Bordeaux, CNRS (LaBRI UMR 5800), Inria
#
# StarPU is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or (at
# your option) any later version.
#
# StarPU is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU Lesser General Public License in COPYING.LGPL for more details.
#

PROGNAME=$0

usage()
{
    echo "Tool to launch StarPUPY and examples"
    echo ""
    echo "  Typical usage:"
    echo "     $PROGNAME [python_script.py]"
    echo ""
    echo "Options:"
    echo "	-h, --help          display this help and exit"
    echo "	-v, --version       output version information and exit"
    echo "	--valgrind          launch executable with valgrind"
    echo "	--gdb               launch executable with gdb"
    echo "	--mpirun            launch executable with MPI using 2 processes"
    exit 0
}

starpupy_path=@STARPU_SRC_DIR@/starpupy
modpath=@STARPU_BUILD_DIR@/src/.libs${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
pypath=@STARPU_BUILD_DIR@/starpupy/src/build:$PYTHONPATH

LOADER="@STARPU_BUILD_DIR@/starpupy/examples/loader"
PYTHON=@PYTHON@
# python produces a lot of "possibly lost" false positives
export STARPU_VALGRIND_OPTIONS="--errors-for-leak-kinds=definite,indirect --show-leak-kinds=definite,indirect"

MPI_LAUNCHER="$LAUNCHER"
if test -z "$MPI_LAUNCHER"
then
    MPI_LAUNCHER="mpiexec -np 2"
fi
mpi=""
gdb=""
MPI_LOADER=""
valgrind=""

EXEC_ARGS=""

for x in $LOADER_ARGS $*
do
    if [ "$x" = "-v" ] || [ "$x" = "--version" ]
    then
	echo "$PROGNAME (@PACKAGE_NAME@) @PACKAGE_VERSION@"
	exit 0
    fi

    if [ "$x" = "-h" ] || [ "$x" = "--help" ]
    then
	usage
	exit 0
    fi

    if test "$x" == "--valgrind"
    then
	valgrind="valgrind"
	export PYTHONMALLOC=malloc
	LOADER="$LOADER valgrind --track-origins=yes"
    elif test "$x" == "--gdb"
    then
	gdb="gdb"
	LOADER="gdb --args"
    elif test "$x" == "--mpirun"
    then
	mpi="mpi"
    else
	EXEC_ARGS="$EXEC_ARGS $x"
    fi
done

if test "$mpi" == "mpi"
then
    if test -n "$gdb"
    then
	MPI_LOADER="$MPI_LAUNCHER xterm $XTERM_PARAMS -sl 10000 -e"
    elif test -n "$valgrind"
    then
	MPI_LOADER="$MPI_LAUNCHER xterm $XTERM_PARAMS -sl 10000 -hold -e"
    else
	MPI_LOADER="$MPI_LAUNCHER"
    fi
fi

# set arguments with the cleaned list
set -- $EXEC_ARGS

examplefile=$1
shift
if test -n "$examplefile"
then
    if test -f $examplefile
    then
	pythonscript=$examplefile
    elif test -f $starpupy_path/$examplefile
    then
	pythonscript=$starpupy_path/$examplefile
    else
	echo "Error. Python script $examplefile not found in current directory or in $starpupy_path"
	exit 1
    fi
else
    # Interactive use
    if ! test -n "$gdb"
    then
	    LOADER=""
    fi
fi

set -x
if [ -n "$STARPU_LD_PRELOAD" ]
then
    export LD_PRELOAD=$STARPU_LD_PRELOAD${LD_PRELOAD:+:$LD_PRELOAD}
fi
export PYTHONPATH=$pypath LD_LIBRARY_PATH=$modpath

exec $MPI_LOADER $LOADER $PYTHON $pythonscript $*
